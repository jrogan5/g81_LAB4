library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Booth_Mult is
    Port ( 
        In_1, In_2 : in std_logic_vector (7 downto 0);
        clk : in std_logic;
        ready : in std_logic;
        done : out std_logic;
        S : out std_logic_vector (15 downto 0)
    );
end Booth_Mult;

architecture arch of Booth_Mult is 

    signal M : signed (7 downto 0);
    signal Q : signed (8 downto 0);
    signal A : signed (7 downto 0);
    signal cond : std_logic_vector(1 downto 0);
    signal shifted_Q : std_logic_vector (8 downto 0);
    signal AQ : std_logic_vector(16 downto 0);
    signal AQ_shifted : std_logic_vector(16 downto 0);
    signal i : integer := 0;
    signal done_int : std_logic;

    begin 

    process(clk)
    begin
        if rising_edge(clk) then
            if ready = '1' then -- if it's in ready mode, then inialize values. 
                M <= signed(In_1); -- converts M to 2's complement 
                Q <= signed(In_2 & '0');
                A <= to_signed(0, 8); -- Initialize A to 0
                cond <= std_logic_vector(Q(1 downto 0));
                i <= 0; -- initialize index to 0
            else if (not done_int = '1') then
                cond <= std_logic_vector(Q(1 downto 0));
                
            
                case cond is
                    when "10" =>
                        A <= A - M;
                    when "01" =>
                        A <= A + M;
                    when others => A;
                end case;
                    AQ <= std_logic_vector(A) & std_logic_vector(Q); -- shifting of AQ happens each time
                    AQ_shifted <= std_logic_vector(shift_right(unsigned(AQ),1));
                    
                    Q <= signed(AQ_shifted(8 downto 0)); -- split up A and Q 
                    A <= signed(AQ_shifted(16 downto 9));
                    i <= i + 1; -- increment i by 1
            end if;
        end if;
        end if;
    end process;
    done_int <= '1' when (i = 8) else '0';
    done <= '1' when (i = 8) else '0';
    S <= AQ_shifted(16 downto 1) when done_int = '1' else (15 downto 0 => '0');

end arch;